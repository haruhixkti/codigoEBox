/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package principal;

import activityRender.ActivityRender;
import audioRecorder.Audio;
import com.github.sarxos.webcam.Webcam;
import com.xuggle.mediatool.IMediaWriter;
import com.xuggle.xuggler.IVideoPicture;
import com.xuggle.xuggler.video.IConverter;
import faceRecorder.FaceRecorder;
import java.awt.Dimension;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.util.concurrent.BrokenBarrierException;
import java.util.concurrent.CyclicBarrier;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import java.awt.Robot;

/**
 *
 * @author Katherine
 */
public class Pestanas extends javax.swing.JFrame {
    //captura de pantalla
    ActivityRender activityRender;
    boolean perspectivaActivityRender = false;
    public static boolean iPerspectivaActivityRender = false;
    public static boolean dPerspectivaActivityRender = false;
        /**
	 * Screen Width.
	 */
	public static int screenWidth = (int) Toolkit.getDefaultToolkit()
			.getScreenSize().getWidth();

	/**
	 * Screen Height.
	 */
	public static int screenHeight = (int) Toolkit.getDefaultToolkit()
			.getScreenSize().getHeight();

	/**
	 * Interval between which the image needs to be captured.
	 */
	public static int captureInterval = 10;

	/**
	 * Temporary folder to store the screenshot.
	 */
	//public static String store = "imgActivityRender";

	/**
	 * Status of the recorder.
	 */
	public static boolean record = false;
    Thread t1,t2;
    
    
    
    //captura de audio
    Audio audio;
    
    
    public static boolean iPerspectivaAudioRecorder = false;
    public static boolean dPerspectivaAudioRecorder = false;
    //captura con videocam
    FaceRecorder faceRecorder;
    Webcam webcam;
    boolean isRunning = true;
    File file;
    IMediaWriter writer;
    Dimension size;
    long start;
    BufferedImage image, image2;
    IConverter converter;
    IVideoPicture frame; 
    boolean perspectivaFaceRecorder = true;
    public static boolean iFaceRecorder = false;
    public static boolean dFaceRecorder = false;
    
    String codigoProyecto = "cod1";
    int cantidadMuestra = 0;
    String path = "C:\\Users\\Katherine\\Documents\\MEMORIA\\MemoriacodigoEbox\\muestras";
    final CyclicBarrier gate = new CyclicBarrier(3);
    //
    
    
    /**
     * Creates new form Pestanas
     */
    public Pestanas() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnIniciar = new javax.swing.JLabel();
        btnDetener = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnIniciar.setBackground(new java.awt.Color(102, 255, 51));
        btnIniciar.setText("Iniciar");
        btnIniciar.setOpaque(true);
        btnIniciar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnIniciarMouseClicked(evt);
            }
        });

        btnDetener.setBackground(new java.awt.Color(255, 0, 0));
        btnDetener.setText("Detener");
        btnDetener.setOpaque(true);
        btnDetener.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnDetenerMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addComponent(btnIniciar, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addComponent(btnDetener, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(97, 97, 97))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(180, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btnDetener, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
                    .addComponent(btnIniciar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(82, 82, 82))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnIniciarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnIniciarMouseClicked
        // TODO add your handling code here:
        //definir nombre para muestra
        cantidadMuestra = cantidadMuestra +1;
        //creacion de directorios
        //ActivityRender
        String storeAR = "imgActivityRender";
        
        File fAR = new File(storeAR);
        
        if(!fAR.exists()){
            System.out.println("Creacion de directorio para ActivityRender");
                fAR.mkdir();
        }
         
        //FaceRecorder
        String storeFR = "imgFaceRecorder";
        File fFR= new File(storeFR);
        if(!fFR.exists()){
                    System.out.println("Creacion de directorio para FaceRecorder");
			fFR.mkdir();
        }
        
          
        
        
        //FACERECORDER
         t1 = new Thread(){
         @Override
         public void run(){
        
             try {
                 gate.await();
                 
                 System.out.println("****** Inicio captura de muestras face ******");
                 
                 /*faceRecorder = new FaceRecorder();
                 //audio = new Audio();
                 faceRecorder.startRecord(storeFR);
                 //audio.inicializar();*/
                 
                 System.out.println("Se debio haber abierto la camara");
                
                 
                 while(isRunning){
                     
                     
                     
                     try {
                         image2 = webcam.getImage();
                         ImageIO.write(image2, "jpg", new File("./"+storeFR+"/"+System.currentTimeMillis()+".jpg"));
                         Thread.sleep(10);
                         
                     } catch (InterruptedException ex) {
                         //Logger.getLogger(CameraTest.class.getName()).log(Level.SEVERE, null, ex);
                     }  catch (IOException ex) {
                         Logger.getLogger(FaceRecorder.class.getName()).log(Level.SEVERE, null, ex);
                     }
                     
                 }
                 
                  
                 System.out.println("Captura de cara finalizada");
             } catch (InterruptedException ex) {
                 Logger.getLogger(Pestanas.class.getName()).log(Level.SEVERE, null, ex);
             } catch (BrokenBarrierException ex) {
                 Logger.getLogger(Pestanas.class.getName()).log(Level.SEVERE, null, ex);
             }
            
                      
     
       
    }};
        //ACTIVIY RENDER
         t2 = new Thread(){
        @Override
        public void run(){
          
             
                System.out.println("****** Inicio captura de muestras activity ******");        
            
                try {
                   /* activityRender = new ActivityRender();
                    activityRender.startRecord(storeAR);*/
                   gate.await();
                            Robot rt;
                            
                            try {
                                    rt = new Robot();
                                    while (isRunning) {
                                        
                                        
                                            BufferedImage img = rt
                                                            .createScreenCapture(new Rectangle(screenWidth,
                                                                            screenHeight));
                                            ImageIO.write(img, "jpeg", new File("./"+storeAR+"/"
                                                            + System.currentTimeMillis() + ".jpeg"));
                                          
                                            // System.out.println(record);
                                            Thread.sleep(captureInterval);
                                    }
                                    System.out.println("Captura de pantalla finalizada");
                                    
                            } catch (Exception e) {
                                    e.printStackTrace();
                            }
                   
                } catch (Exception ex) {
                    Logger.getLogger(Pestanas.class.getName()).log(Level.SEVERE, null, ex);
                }
        
                        
          
        }};
    System.out.println("Antes de abrir la camara");
    webcam = Webcam.getDefault();
    
    
        
    webcam.setViewSize(new Dimension(320,240));
    webcam.open(true);
    
    if( webcam.isOpen()){
    System.out.println("Despues de abrir la camara");
    t1.start();
    
    t2.start();
    }
    
    
        try {
            gate.await();
        } catch (InterruptedException ex) {
            Logger.getLogger(Pestanas.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BrokenBarrierException ex) {
            Logger.getLogger(Pestanas.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    System.out.println("all threads started");
     start = System.currentTimeMillis();
                 System.out.println("TIEMPO INICIO: "+ start/0.001);
        /*try {
          t1.join();
            t2.join();
            System.out.println("Se hizo el join");
        } catch (InterruptedException ex) {
            Logger.getLogger(Pestanas.class.getName()).log(Level.SEVERE, null, ex);
        }*/
    
        
    }//GEN-LAST:event_btnIniciarMouseClicked

    private void btnDetenerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDetenerMouseClicked
        // TODO add your handling code here:
        
        isRunning= false;
        System.out.println("Deteniendo capturas");
         start = System.currentTimeMillis();
                 System.out.println("TIEMPO TERMINO: "+ start/0.001);
         webcam.open(false);
         webcam.close();
        //gate.wait();
        t1.interrupt();
        t2.interrupt();
          
           
    }//GEN-LAST:event_btnDetenerMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Pestanas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Pestanas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Pestanas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Pestanas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Pestanas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel btnDetener;
    private javax.swing.JLabel btnIniciar;
    // End of variables declaration//GEN-END:variables
}
