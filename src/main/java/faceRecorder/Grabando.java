/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package faceRecorder;
//import activityRender.JpegImagesToMovie;
import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamResolution;
import java.awt.Dimension;
import java.awt.image.BufferedImage;
import java.io.File;

import com.xuggle.mediatool.IMediaWriter;
import com.xuggle.mediatool.ToolFactory;
import com.xuggle.xuggler.ICodec;
import com.xuggle.xuggler.IPixelFormat;
import com.xuggle.xuggler.IVideoPicture;
import com.xuggle.xuggler.video.ConverterFactory;
import com.xuggle.xuggler.video.IConverter;
import java.awt.Toolkit;
import java.io.IOException;
import java.net.MalformedURLException;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.media.MediaLocator;

import javax.swing.ImageIcon;
/**
 *
 * @author Katherine
 */
public class Grabando extends javax.swing.JFrame {
    Webcam webcam;
    boolean isRunning = false;
    File file;
    IMediaWriter writer;
    Dimension size;
    long start;
    BufferedImage image, image2;
    IConverter converter;
    IVideoPicture frame;
    Calendar calendario = Calendar.getInstance();
    int cantidadFrame = 0;
    public static String store = "FaceRecorderTemporal";
      // 10 FPS Thread.sleep(100);
      // 20 FPS -> (50)
      // 25 FPS -> (40)
    public static int captureInterval = 40;
      
    public static int screenWidth = 320;

	/**
	 * Screen Height.
	 */
    public static int screenHeight = 240;
    
    /**
     * Creates new form Grabando
     */
    public Grabando() {
        initComponents();
      
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pantalla = new javax.swing.JLabel();
        btnInicio = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnInicio.setText("Iniciar");
        btnInicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInicioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pantalla, javax.swing.GroupLayout.DEFAULT_SIZE, 320, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(117, 117, 117)
                .addComponent(btnInicio)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pantalla, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addComponent(btnInicio)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnInicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInicioActionPerformed
        // TODO add your handling code here:
              if(!isRunning){
            isRunning = true;
                 File f = new File(store);
		if(!f.exists()){
			f.mkdir();
                        System.out.println("Se creo directorio");
		}
           
            new VideoFeedTaker().start();
        }
        else{
            isRunning = false;
                  try {
                      makeVideo("test.mov");
                  } catch (MalformedURLException ex) {
                      Logger.getLogger(Grabando.class.getName()).log(Level.SEVERE, null, ex);
                  }
    
        }
    }//GEN-LAST:event_btnInicioActionPerformed
        	public static void makeVideo(String movFile) throws MalformedURLException {
		System.out
				.println("#### Easy Capture making video, please wait!!! ####");
		JpegImagesToMovie imageToMovie = new JpegImagesToMovie();
		Vector<String> imgLst = new Vector<String>();
		File f = new File(store);
		File[] fileLst = f.listFiles();
		for (int i = 0; i < fileLst.length; i++) {
			imgLst.add(fileLst[i].getAbsolutePath());
		}
		// Generate the output media locators.
		MediaLocator oml;
                //if (oml = imageToMovie.c) {
		if ((oml = imageToMovie.createMediaLocator(movFile)) == null) {
			System.err.println("Cannot build media locator from: " + movFile);
			System.exit(0);
		}
		imageToMovie.doIt(screenWidth, screenHeight, (1000 / captureInterval),
				imgLst, oml);

	}	
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Grabando.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Grabando.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Grabando.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Grabando.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Grabando().setVisible(true);
            }
        });
    }
    class VideoFeedTaker extends Thread{
           @Override
        public void run() {
               System.out.println("Entre al hilo");
            file = new File("output.ts");
            writer = ToolFactory.makeWriter(file.getName());
            size = WebcamResolution.QVGA.getSize();
               System.out.println("SIZE: "+size);
            writer.addVideoStream(0, 0, ICodec.ID.CODEC_ID_H264, size.width, size.height);
            

            webcam = Webcam.getDefault();
            
              webcam.setViewSize(new Dimension(320,240));
//webcam.setViewSize(size);
            webcam.open(true);
            System.out.println("Se debio haber abierto la camara");
            start = System.currentTimeMillis();
            int i=0;
            
            while(isRunning){
          
                try {
                   image = ConverterFactory.convertToType(webcam.getImage(), BufferedImage.TYPE_3BYTE_BGR);
                   image2 = webcam.getImage();
                   cantidadFrame+=1;
                   ImageIO.write(image2, "jpg", new File("./"+store+"/"+System.currentTimeMillis()+".jpg"));
                   //ImageIO.write(image2, "jpg", new File("./"+store+"/"+cantidadFrame+".jpg"));
                   
                   pantalla.setIcon(new ImageIcon(image2));
                   converter = ConverterFactory.createConverter(image, IPixelFormat.Type.YUV420P);
                   frame = converter.toPicture(image, (System.currentTimeMillis() - start) * 1000);
                   frame.setKeyFrame(i == 0);
			frame.setQuality(0);

			writer.encodeVideo(0, frame);

			
			Thread.sleep(captureInterval);
                        
                } catch (InterruptedException ex) {
                    //Logger.getLogger(CameraTest.class.getName()).log(Level.SEVERE, null, ex);
                }  catch (IOException ex) {
                       Logger.getLogger(Grabando.class.getName()).log(Level.SEVERE, null, ex);
                   }
                i=i+1;
            }
            writer.close();

		System.out.println("Video recorded in file: " + file.getAbsolutePath());
                System.out.println("Cantidad de frames: "+ cantidadFrame);
                int tiempo = cantidadFrame/25;
                System.out.println("Segundos que deberia durar: "+tiempo+ " segundos");
        }
    
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnInicio;
    private javax.swing.JLabel pantalla;
    // End of variables declaration//GEN-END:variables
}
